
//===------------------------------------------------------------*- C++ -*-===//
//
// Automatically generated file for High-level Synthesis (HLS).
//
//===----------------------------------------------------------------------===//

#include <algorithm>
#include <ap_axi_sdata.h>
#include <ap_fixed.h>
#include <ap_int.h>
#include <hls_math.h>
#include <hls_stream.h>
#include <hls_vector.h>
#include <math.h>
#include <stdint.h>
#include <string.h>

using namespace std;

/// This is top function.
/// Latency=10038, interval=10038
/// DSP=160, BRAM=0
void test_mvt(
  float v0[400][400],
  float v1[400],
  float v2[400],
  float v3[400],
  float v4[400]
) {	// L2, [0,10038)
  #pragma HLS interface s_axilite port=return bundle=ctrl
  #pragma HLS interface bram port=v0
  #pragma HLS array_partition variable=v0 cyclic factor=16 dim=1
  #pragma HLS array_partition variable=v0 cyclic factor=16 dim=2

  #pragma HLS interface bram port=v1
  #pragma HLS array_partition variable=v1 cyclic factor=2 dim=1

  #pragma HLS interface bram port=v2
  #pragma HLS array_partition variable=v2 cyclic factor=2 dim=1

  #pragma HLS interface bram port=v3
  #pragma HLS array_partition variable=v3 cyclic factor=16 dim=1

  #pragma HLS interface bram port=v4
  #pragma HLS array_partition variable=v4 cyclic factor=16 dim=1

  for (int v5 = 0; v5 < 200; v5 += 1) {	// L3, [0,5018), iterCycle=17, II=1
    for (int v6 = 0; v6 < 25; v6 += 1) {	// L4, [5018,5061), iterCycle=17, II=1
      #pragma HLS pipeline II=1
      float v7 = v0[(v6 * 16)][(v5 * 2)];	// L5, [0,2)
      float v8 = v1[(v5 * 2)];	// L6, [0,2)
      float v9 = v7 * v8;	// L7, [2,6)
      float v10 = v0[((v6 * 16) + 1)][(v5 * 2)];	// L8, [0,2)
      float v11 = v10 * v8;	// L9, [2,6)
      float v12 = v0[((v6 * 16) + 2)][(v5 * 2)];	// L10, [0,2)
      float v13 = v12 * v8;	// L11, [2,6)
      float v14 = v0[((v6 * 16) + 3)][(v5 * 2)];	// L12, [0,2)
      float v15 = v14 * v8;	// L13, [2,6)
      float v16 = v0[((v6 * 16) + 4)][(v5 * 2)];	// L14, [0,2)
      float v17 = v16 * v8;	// L15, [2,6)
      float v18 = v0[((v6 * 16) + 5)][(v5 * 2)];	// L16, [0,2)
      float v19 = v18 * v8;	// L17, [2,6)
      float v20 = v0[((v6 * 16) + 6)][(v5 * 2)];	// L18, [0,2)
      float v21 = v20 * v8;	// L19, [2,6)
      float v22 = v0[((v6 * 16) + 7)][(v5 * 2)];	// L20, [0,2)
      float v23 = v22 * v8;	// L21, [2,6)
      float v24 = v0[((v6 * 16) + 8)][(v5 * 2)];	// L22, [0,2)
      float v25 = v24 * v8;	// L23, [2,6)
      float v26 = v0[((v6 * 16) + 9)][(v5 * 2)];	// L24, [0,2)
      float v27 = v26 * v8;	// L25, [2,6)
      float v28 = v0[((v6 * 16) + 10)][(v5 * 2)];	// L26, [0,2)
      float v29 = v28 * v8;	// L27, [2,6)
      float v30 = v0[((v6 * 16) + 11)][(v5 * 2)];	// L28, [0,2)
      float v31 = v30 * v8;	// L29, [2,6)
      float v32 = v0[((v6 * 16) + 12)][(v5 * 2)];	// L30, [0,2)
      float v33 = v32 * v8;	// L31, [2,6)
      float v34 = v0[((v6 * 16) + 13)][(v5 * 2)];	// L32, [0,2)
      float v35 = v34 * v8;	// L33, [2,6)
      float v36 = v0[((v6 * 16) + 14)][(v5 * 2)];	// L34, [0,2)
      float v37 = v36 * v8;	// L35, [2,6)
      float v38 = v0[((v6 * 16) + 15)][(v5 * 2)];	// L36, [0,2)
      float v39 = v38 * v8;	// L37, [2,6)
      float v40 = v0[(v6 * 16)][((v5 * 2) + 1)];	// L38, [0,2)
      float v41 = v1[((v5 * 2) + 1)];	// L39, [0,2)
      float v42 = v40 * v41;	// L40, [2,6)
      float v43 = v9 + v42;	// L41, [6,11)
      float v44 = v3[(v6 * 16)];	// L42, [9,11)
      float v45 = v44 + v43;	// L43, [11,16)
      v3[(v6 * 16)] = v45;	// L44, [16,17)
      float v46 = v0[((v6 * 16) + 1)][((v5 * 2) + 1)];	// L45, [0,2)
      float v47 = v46 * v41;	// L46, [2,6)
      float v48 = v11 + v47;	// L47, [6,11)
      float v49 = v3[((v6 * 16) + 1)];	// L48, [9,11)
      float v50 = v49 + v48;	// L49, [11,16)
      v3[((v6 * 16) + 1)] = v50;	// L50, [16,17)
      float v51 = v0[((v6 * 16) + 2)][((v5 * 2) + 1)];	// L51, [0,2)
      float v52 = v51 * v41;	// L52, [2,6)
      float v53 = v13 + v52;	// L53, [6,11)
      float v54 = v3[((v6 * 16) + 2)];	// L54, [9,11)
      float v55 = v54 + v53;	// L55, [11,16)
      v3[((v6 * 16) + 2)] = v55;	// L56, [16,17)
      float v56 = v0[((v6 * 16) + 3)][((v5 * 2) + 1)];	// L57, [0,2)
      float v57 = v56 * v41;	// L58, [2,6)
      float v58 = v15 + v57;	// L59, [6,11)
      float v59 = v3[((v6 * 16) + 3)];	// L60, [9,11)
      float v60 = v59 + v58;	// L61, [11,16)
      v3[((v6 * 16) + 3)] = v60;	// L62, [16,17)
      float v61 = v0[((v6 * 16) + 4)][((v5 * 2) + 1)];	// L63, [0,2)
      float v62 = v61 * v41;	// L64, [2,6)
      float v63 = v17 + v62;	// L65, [6,11)
      float v64 = v3[((v6 * 16) + 4)];	// L66, [9,11)
      float v65 = v64 + v63;	// L67, [11,16)
      v3[((v6 * 16) + 4)] = v65;	// L68, [16,17)
      float v66 = v0[((v6 * 16) + 5)][((v5 * 2) + 1)];	// L69, [0,2)
      float v67 = v66 * v41;	// L70, [2,6)
      float v68 = v19 + v67;	// L71, [6,11)
      float v69 = v3[((v6 * 16) + 5)];	// L72, [9,11)
      float v70 = v69 + v68;	// L73, [11,16)
      v3[((v6 * 16) + 5)] = v70;	// L74, [16,17)
      float v71 = v0[((v6 * 16) + 6)][((v5 * 2) + 1)];	// L75, [0,2)
      float v72 = v71 * v41;	// L76, [2,6)
      float v73 = v21 + v72;	// L77, [6,11)
      float v74 = v3[((v6 * 16) + 6)];	// L78, [9,11)
      float v75 = v74 + v73;	// L79, [11,16)
      v3[((v6 * 16) + 6)] = v75;	// L80, [16,17)
      float v76 = v0[((v6 * 16) + 7)][((v5 * 2) + 1)];	// L81, [0,2)
      float v77 = v76 * v41;	// L82, [2,6)
      float v78 = v23 + v77;	// L83, [6,11)
      float v79 = v3[((v6 * 16) + 7)];	// L84, [9,11)
      float v80 = v79 + v78;	// L85, [11,16)
      v3[((v6 * 16) + 7)] = v80;	// L86, [16,17)
      float v81 = v0[((v6 * 16) + 8)][((v5 * 2) + 1)];	// L87, [0,2)
      float v82 = v81 * v41;	// L88, [2,6)
      float v83 = v25 + v82;	// L89, [6,11)
      float v84 = v3[((v6 * 16) + 8)];	// L90, [9,11)
      float v85 = v84 + v83;	// L91, [11,16)
      v3[((v6 * 16) + 8)] = v85;	// L92, [16,17)
      float v86 = v0[((v6 * 16) + 9)][((v5 * 2) + 1)];	// L93, [0,2)
      float v87 = v86 * v41;	// L94, [2,6)
      float v88 = v27 + v87;	// L95, [6,11)
      float v89 = v3[((v6 * 16) + 9)];	// L96, [9,11)
      float v90 = v89 + v88;	// L97, [11,16)
      v3[((v6 * 16) + 9)] = v90;	// L98, [16,17)
      float v91 = v0[((v6 * 16) + 10)][((v5 * 2) + 1)];	// L99, [0,2)
      float v92 = v91 * v41;	// L100, [2,6)
      float v93 = v29 + v92;	// L101, [6,11)
      float v94 = v3[((v6 * 16) + 10)];	// L102, [9,11)
      float v95 = v94 + v93;	// L103, [11,16)
      v3[((v6 * 16) + 10)] = v95;	// L104, [16,17)
      float v96 = v0[((v6 * 16) + 11)][((v5 * 2) + 1)];	// L105, [0,2)
      float v97 = v96 * v41;	// L106, [2,6)
      float v98 = v31 + v97;	// L107, [6,11)
      float v99 = v3[((v6 * 16) + 11)];	// L108, [9,11)
      float v100 = v99 + v98;	// L109, [11,16)
      v3[((v6 * 16) + 11)] = v100;	// L110, [16,17)
      float v101 = v0[((v6 * 16) + 12)][((v5 * 2) + 1)];	// L111, [0,2)
      float v102 = v101 * v41;	// L112, [2,6)
      float v103 = v33 + v102;	// L113, [6,11)
      float v104 = v3[((v6 * 16) + 12)];	// L114, [9,11)
      float v105 = v104 + v103;	// L115, [11,16)
      v3[((v6 * 16) + 12)] = v105;	// L116, [16,17)
      float v106 = v0[((v6 * 16) + 13)][((v5 * 2) + 1)];	// L117, [0,2)
      float v107 = v106 * v41;	// L118, [2,6)
      float v108 = v35 + v107;	// L119, [6,11)
      float v109 = v3[((v6 * 16) + 13)];	// L120, [9,11)
      float v110 = v109 + v108;	// L121, [11,16)
      v3[((v6 * 16) + 13)] = v110;	// L122, [16,17)
      float v111 = v0[((v6 * 16) + 14)][((v5 * 2) + 1)];	// L123, [0,2)
      float v112 = v111 * v41;	// L124, [2,6)
      float v113 = v37 + v112;	// L125, [6,11)
      float v114 = v3[((v6 * 16) + 14)];	// L126, [9,11)
      float v115 = v114 + v113;	// L127, [11,16)
      v3[((v6 * 16) + 14)] = v115;	// L128, [16,17)
      float v116 = v0[((v6 * 16) + 15)][((v5 * 2) + 1)];	// L129, [0,2)
      float v117 = v116 * v41;	// L130, [2,6)
      float v118 = v39 + v117;	// L131, [6,11)
      float v119 = v3[((v6 * 16) + 15)];	// L132, [9,11)
      float v120 = v119 + v118;	// L133, [11,16)
      v3[((v6 * 16) + 15)] = v120;	// L134, [16,17)
    }
  }
  for (int v121 = 0; v121 < 200; v121 += 1) {	// L137, [5018,10036), iterCycle=17, II=1
    for (int v122 = 0; v122 < 25; v122 += 1) {	// L138, [0,43), iterCycle=17, II=1
      #pragma HLS pipeline II=1
      float v123 = v0[(v121 * 2)][(v122 * 16)];	// L139, [0,2)
      float v124 = v2[(v121 * 2)];	// L140, [0,2)
      float v125 = v123 * v124;	// L141, [2,6)
      float v126 = v0[(v121 * 2)][((v122 * 16) + 1)];	// L142, [0,2)
      float v127 = v126 * v124;	// L143, [2,6)
      float v128 = v0[(v121 * 2)][((v122 * 16) + 2)];	// L144, [0,2)
      float v129 = v128 * v124;	// L145, [2,6)
      float v130 = v0[(v121 * 2)][((v122 * 16) + 3)];	// L146, [0,2)
      float v131 = v130 * v124;	// L147, [2,6)
      float v132 = v0[(v121 * 2)][((v122 * 16) + 4)];	// L148, [0,2)
      float v133 = v132 * v124;	// L149, [2,6)
      float v134 = v0[(v121 * 2)][((v122 * 16) + 5)];	// L150, [0,2)
      float v135 = v134 * v124;	// L151, [2,6)
      float v136 = v0[(v121 * 2)][((v122 * 16) + 6)];	// L152, [0,2)
      float v137 = v136 * v124;	// L153, [2,6)
      float v138 = v0[(v121 * 2)][((v122 * 16) + 7)];	// L154, [0,2)
      float v139 = v138 * v124;	// L155, [2,6)
      float v140 = v0[(v121 * 2)][((v122 * 16) + 8)];	// L156, [0,2)
      float v141 = v140 * v124;	// L157, [2,6)
      float v142 = v0[(v121 * 2)][((v122 * 16) + 9)];	// L158, [0,2)
      float v143 = v142 * v124;	// L159, [2,6)
      float v144 = v0[(v121 * 2)][((v122 * 16) + 10)];	// L160, [0,2)
      float v145 = v144 * v124;	// L161, [2,6)
      float v146 = v0[(v121 * 2)][((v122 * 16) + 11)];	// L162, [0,2)
      float v147 = v146 * v124;	// L163, [2,6)
      float v148 = v0[(v121 * 2)][((v122 * 16) + 12)];	// L164, [0,2)
      float v149 = v148 * v124;	// L165, [2,6)
      float v150 = v0[(v121 * 2)][((v122 * 16) + 13)];	// L166, [0,2)
      float v151 = v150 * v124;	// L167, [2,6)
      float v152 = v0[(v121 * 2)][((v122 * 16) + 14)];	// L168, [0,2)
      float v153 = v152 * v124;	// L169, [2,6)
      float v154 = v0[(v121 * 2)][((v122 * 16) + 15)];	// L170, [0,2)
      float v155 = v154 * v124;	// L171, [2,6)
      float v156 = v0[((v121 * 2) + 1)][(v122 * 16)];	// L172, [0,2)
      float v157 = v2[((v121 * 2) + 1)];	// L173, [0,2)
      float v158 = v156 * v157;	// L174, [2,6)
      float v159 = v125 + v158;	// L175, [6,11)
      float v160 = v4[(v122 * 16)];	// L176, [9,11)
      float v161 = v160 + v159;	// L177, [11,16)
      v4[(v122 * 16)] = v161;	// L178, [16,17)
      float v162 = v0[((v121 * 2) + 1)][((v122 * 16) + 1)];	// L179, [0,2)
      float v163 = v162 * v157;	// L180, [2,6)
      float v164 = v127 + v163;	// L181, [6,11)
      float v165 = v4[((v122 * 16) + 1)];	// L182, [9,11)
      float v166 = v165 + v164;	// L183, [11,16)
      v4[((v122 * 16) + 1)] = v166;	// L184, [16,17)
      float v167 = v0[((v121 * 2) + 1)][((v122 * 16) + 2)];	// L185, [0,2)
      float v168 = v167 * v157;	// L186, [2,6)
      float v169 = v129 + v168;	// L187, [6,11)
      float v170 = v4[((v122 * 16) + 2)];	// L188, [9,11)
      float v171 = v170 + v169;	// L189, [11,16)
      v4[((v122 * 16) + 2)] = v171;	// L190, [16,17)
      float v172 = v0[((v121 * 2) + 1)][((v122 * 16) + 3)];	// L191, [0,2)
      float v173 = v172 * v157;	// L192, [2,6)
      float v174 = v131 + v173;	// L193, [6,11)
      float v175 = v4[((v122 * 16) + 3)];	// L194, [9,11)
      float v176 = v175 + v174;	// L195, [11,16)
      v4[((v122 * 16) + 3)] = v176;	// L196, [16,17)
      float v177 = v0[((v121 * 2) + 1)][((v122 * 16) + 4)];	// L197, [0,2)
      float v178 = v177 * v157;	// L198, [2,6)
      float v179 = v133 + v178;	// L199, [6,11)
      float v180 = v4[((v122 * 16) + 4)];	// L200, [9,11)
      float v181 = v180 + v179;	// L201, [11,16)
      v4[((v122 * 16) + 4)] = v181;	// L202, [16,17)
      float v182 = v0[((v121 * 2) + 1)][((v122 * 16) + 5)];	// L203, [0,2)
      float v183 = v182 * v157;	// L204, [2,6)
      float v184 = v135 + v183;	// L205, [6,11)
      float v185 = v4[((v122 * 16) + 5)];	// L206, [9,11)
      float v186 = v185 + v184;	// L207, [11,16)
      v4[((v122 * 16) + 5)] = v186;	// L208, [16,17)
      float v187 = v0[((v121 * 2) + 1)][((v122 * 16) + 6)];	// L209, [0,2)
      float v188 = v187 * v157;	// L210, [2,6)
      float v189 = v137 + v188;	// L211, [6,11)
      float v190 = v4[((v122 * 16) + 6)];	// L212, [9,11)
      float v191 = v190 + v189;	// L213, [11,16)
      v4[((v122 * 16) + 6)] = v191;	// L214, [16,17)
      float v192 = v0[((v121 * 2) + 1)][((v122 * 16) + 7)];	// L215, [0,2)
      float v193 = v192 * v157;	// L216, [2,6)
      float v194 = v139 + v193;	// L217, [6,11)
      float v195 = v4[((v122 * 16) + 7)];	// L218, [9,11)
      float v196 = v195 + v194;	// L219, [11,16)
      v4[((v122 * 16) + 7)] = v196;	// L220, [16,17)
      float v197 = v0[((v121 * 2) + 1)][((v122 * 16) + 8)];	// L221, [0,2)
      float v198 = v197 * v157;	// L222, [2,6)
      float v199 = v141 + v198;	// L223, [6,11)
      float v200 = v4[((v122 * 16) + 8)];	// L224, [9,11)
      float v201 = v200 + v199;	// L225, [11,16)
      v4[((v122 * 16) + 8)] = v201;	// L226, [16,17)
      float v202 = v0[((v121 * 2) + 1)][((v122 * 16) + 9)];	// L227, [0,2)
      float v203 = v202 * v157;	// L228, [2,6)
      float v204 = v143 + v203;	// L229, [6,11)
      float v205 = v4[((v122 * 16) + 9)];	// L230, [9,11)
      float v206 = v205 + v204;	// L231, [11,16)
      v4[((v122 * 16) + 9)] = v206;	// L232, [16,17)
      float v207 = v0[((v121 * 2) + 1)][((v122 * 16) + 10)];	// L233, [0,2)
      float v208 = v207 * v157;	// L234, [2,6)
      float v209 = v145 + v208;	// L235, [6,11)
      float v210 = v4[((v122 * 16) + 10)];	// L236, [9,11)
      float v211 = v210 + v209;	// L237, [11,16)
      v4[((v122 * 16) + 10)] = v211;	// L238, [16,17)
      float v212 = v0[((v121 * 2) + 1)][((v122 * 16) + 11)];	// L239, [0,2)
      float v213 = v212 * v157;	// L240, [2,6)
      float v214 = v147 + v213;	// L241, [6,11)
      float v215 = v4[((v122 * 16) + 11)];	// L242, [9,11)
      float v216 = v215 + v214;	// L243, [11,16)
      v4[((v122 * 16) + 11)] = v216;	// L244, [16,17)
      float v217 = v0[((v121 * 2) + 1)][((v122 * 16) + 12)];	// L245, [0,2)
      float v218 = v217 * v157;	// L246, [2,6)
      float v219 = v149 + v218;	// L247, [6,11)
      float v220 = v4[((v122 * 16) + 12)];	// L248, [9,11)
      float v221 = v220 + v219;	// L249, [11,16)
      v4[((v122 * 16) + 12)] = v221;	// L250, [16,17)
      float v222 = v0[((v121 * 2) + 1)][((v122 * 16) + 13)];	// L251, [0,2)
      float v223 = v222 * v157;	// L252, [2,6)
      float v224 = v151 + v223;	// L253, [6,11)
      float v225 = v4[((v122 * 16) + 13)];	// L254, [9,11)
      float v226 = v225 + v224;	// L255, [11,16)
      v4[((v122 * 16) + 13)] = v226;	// L256, [16,17)
      float v227 = v0[((v121 * 2) + 1)][((v122 * 16) + 14)];	// L257, [0,2)
      float v228 = v227 * v157;	// L258, [2,6)
      float v229 = v153 + v228;	// L259, [6,11)
      float v230 = v4[((v122 * 16) + 14)];	// L260, [9,11)
      float v231 = v230 + v229;	// L261, [11,16)
      v4[((v122 * 16) + 14)] = v231;	// L262, [16,17)
      float v232 = v0[((v121 * 2) + 1)][((v122 * 16) + 15)];	// L263, [0,2)
      float v233 = v232 * v157;	// L264, [2,6)
      float v234 = v155 + v233;	// L265, [6,11)
      float v235 = v4[((v122 * 16) + 15)];	// L266, [9,11)
      float v236 = v235 + v234;	// L267, [11,16)
      v4[((v122 * 16) + 15)] = v236;	// L268, [16,17)
    }
  }
}

