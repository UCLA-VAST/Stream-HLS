
//===------------------------------------------------------------*- C++ -*-===//
//
// Automatically generated file for High-level Synthesis (HLS).
//
//===----------------------------------------------------------------------===//

#include <algorithm>
#include <ap_axi_sdata.h>
#include <ap_fixed.h>
#include <ap_int.h>
#include <hls_math.h>
#include <hls_stream.h>
#include <hls_vector.h>
#include <math.h>
#include <stdint.h>
#include <string.h>

using namespace std;

/// This is top function.
/// Latency=13363, interval=13363
/// DSP=150, BRAM=0
void test_atax(
  float v0[390][410],
  float v1[410],
  float v2[410],
  float v3[390]
) {	// L2, [0,13363)
  #pragma HLS interface s_axilite port=return bundle=ctrl
  #pragma HLS interface bram port=v0
  #pragma HLS array_partition variable=v0 cyclic factor=15 dim=1
  #pragma HLS array_partition variable=v0 cyclic factor=10 dim=2

  #pragma HLS interface bram port=v1
  #pragma HLS array_partition variable=v1 cyclic factor=2 dim=1

  #pragma HLS interface bram port=v2
  #pragma HLS array_partition variable=v2 cyclic factor=10 dim=1

  #pragma HLS interface bram port=v3
  #pragma HLS array_partition variable=v3 cyclic factor=15 dim=1

  for (int v4 = 0; v4 < 205; v4 += 1) {	// L3, [0,5348), iterCycle=17, II=1
    for (int v5 = 0; v5 < 26; v5 += 1) {	// L4, [8013,8057), iterCycle=17, II=1
      #pragma HLS pipeline II=1
      float v6 = v0[(v5 * 15)][(v4 * 2)];	// L5, [0,2)
      float v7 = v1[(v4 * 2)];	// L6, [0,2)
      float v8 = v6 * v7;	// L7, [2,6)
      float v9 = v0[((v5 * 15) + 1)][(v4 * 2)];	// L8, [0,2)
      float v10 = v9 * v7;	// L9, [2,6)
      float v11 = v0[((v5 * 15) + 2)][(v4 * 2)];	// L10, [0,2)
      float v12 = v11 * v7;	// L11, [2,6)
      float v13 = v0[((v5 * 15) + 3)][(v4 * 2)];	// L12, [0,2)
      float v14 = v13 * v7;	// L13, [2,6)
      float v15 = v0[((v5 * 15) + 4)][(v4 * 2)];	// L14, [0,2)
      float v16 = v15 * v7;	// L15, [2,6)
      float v17 = v0[((v5 * 15) + 5)][(v4 * 2)];	// L16, [0,2)
      float v18 = v17 * v7;	// L17, [2,6)
      float v19 = v0[((v5 * 15) + 6)][(v4 * 2)];	// L18, [0,2)
      float v20 = v19 * v7;	// L19, [2,6)
      float v21 = v0[((v5 * 15) + 7)][(v4 * 2)];	// L20, [0,2)
      float v22 = v21 * v7;	// L21, [2,6)
      float v23 = v0[((v5 * 15) + 8)][(v4 * 2)];	// L22, [0,2)
      float v24 = v23 * v7;	// L23, [2,6)
      float v25 = v0[((v5 * 15) + 9)][(v4 * 2)];	// L24, [0,2)
      float v26 = v25 * v7;	// L25, [2,6)
      float v27 = v0[((v5 * 15) + 10)][(v4 * 2)];	// L26, [0,2)
      float v28 = v27 * v7;	// L27, [2,6)
      float v29 = v0[((v5 * 15) + 11)][(v4 * 2)];	// L28, [0,2)
      float v30 = v29 * v7;	// L29, [2,6)
      float v31 = v0[((v5 * 15) + 12)][(v4 * 2)];	// L30, [0,2)
      float v32 = v31 * v7;	// L31, [2,6)
      float v33 = v0[((v5 * 15) + 13)][(v4 * 2)];	// L32, [0,2)
      float v34 = v33 * v7;	// L33, [2,6)
      float v35 = v0[((v5 * 15) + 14)][(v4 * 2)];	// L34, [0,2)
      float v36 = v35 * v7;	// L35, [2,6)
      float v37 = v0[(v5 * 15)][((v4 * 2) + 1)];	// L36, [0,2)
      float v38 = v1[((v4 * 2) + 1)];	// L37, [0,2)
      float v39 = v37 * v38;	// L38, [2,6)
      float v40 = v8 + v39;	// L39, [6,11)
      float v41 = v3[(v5 * 15)];	// L40, [9,11)
      float v42 = v41 + v40;	// L41, [11,16)
      v3[(v5 * 15)] = v42;	// L42, [16,17)
      float v43 = v0[((v5 * 15) + 1)][((v4 * 2) + 1)];	// L43, [0,2)
      float v44 = v43 * v38;	// L44, [2,6)
      float v45 = v10 + v44;	// L45, [6,11)
      float v46 = v3[((v5 * 15) + 1)];	// L46, [9,11)
      float v47 = v46 + v45;	// L47, [11,16)
      v3[((v5 * 15) + 1)] = v47;	// L48, [16,17)
      float v48 = v0[((v5 * 15) + 2)][((v4 * 2) + 1)];	// L49, [0,2)
      float v49 = v48 * v38;	// L50, [2,6)
      float v50 = v12 + v49;	// L51, [6,11)
      float v51 = v3[((v5 * 15) + 2)];	// L52, [9,11)
      float v52 = v51 + v50;	// L53, [11,16)
      v3[((v5 * 15) + 2)] = v52;	// L54, [16,17)
      float v53 = v0[((v5 * 15) + 3)][((v4 * 2) + 1)];	// L55, [0,2)
      float v54 = v53 * v38;	// L56, [2,6)
      float v55 = v14 + v54;	// L57, [6,11)
      float v56 = v3[((v5 * 15) + 3)];	// L58, [9,11)
      float v57 = v56 + v55;	// L59, [11,16)
      v3[((v5 * 15) + 3)] = v57;	// L60, [16,17)
      float v58 = v0[((v5 * 15) + 4)][((v4 * 2) + 1)];	// L61, [0,2)
      float v59 = v58 * v38;	// L62, [2,6)
      float v60 = v16 + v59;	// L63, [6,11)
      float v61 = v3[((v5 * 15) + 4)];	// L64, [9,11)
      float v62 = v61 + v60;	// L65, [11,16)
      v3[((v5 * 15) + 4)] = v62;	// L66, [16,17)
      float v63 = v0[((v5 * 15) + 5)][((v4 * 2) + 1)];	// L67, [0,2)
      float v64 = v63 * v38;	// L68, [2,6)
      float v65 = v18 + v64;	// L69, [6,11)
      float v66 = v3[((v5 * 15) + 5)];	// L70, [9,11)
      float v67 = v66 + v65;	// L71, [11,16)
      v3[((v5 * 15) + 5)] = v67;	// L72, [16,17)
      float v68 = v0[((v5 * 15) + 6)][((v4 * 2) + 1)];	// L73, [0,2)
      float v69 = v68 * v38;	// L74, [2,6)
      float v70 = v20 + v69;	// L75, [6,11)
      float v71 = v3[((v5 * 15) + 6)];	// L76, [9,11)
      float v72 = v71 + v70;	// L77, [11,16)
      v3[((v5 * 15) + 6)] = v72;	// L78, [16,17)
      float v73 = v0[((v5 * 15) + 7)][((v4 * 2) + 1)];	// L79, [0,2)
      float v74 = v73 * v38;	// L80, [2,6)
      float v75 = v22 + v74;	// L81, [6,11)
      float v76 = v3[((v5 * 15) + 7)];	// L82, [9,11)
      float v77 = v76 + v75;	// L83, [11,16)
      v3[((v5 * 15) + 7)] = v77;	// L84, [16,17)
      float v78 = v0[((v5 * 15) + 8)][((v4 * 2) + 1)];	// L85, [0,2)
      float v79 = v78 * v38;	// L86, [2,6)
      float v80 = v24 + v79;	// L87, [6,11)
      float v81 = v3[((v5 * 15) + 8)];	// L88, [9,11)
      float v82 = v81 + v80;	// L89, [11,16)
      v3[((v5 * 15) + 8)] = v82;	// L90, [16,17)
      float v83 = v0[((v5 * 15) + 9)][((v4 * 2) + 1)];	// L91, [0,2)
      float v84 = v83 * v38;	// L92, [2,6)
      float v85 = v26 + v84;	// L93, [6,11)
      float v86 = v3[((v5 * 15) + 9)];	// L94, [9,11)
      float v87 = v86 + v85;	// L95, [11,16)
      v3[((v5 * 15) + 9)] = v87;	// L96, [16,17)
      float v88 = v0[((v5 * 15) + 10)][((v4 * 2) + 1)];	// L97, [0,2)
      float v89 = v88 * v38;	// L98, [2,6)
      float v90 = v28 + v89;	// L99, [6,11)
      float v91 = v3[((v5 * 15) + 10)];	// L100, [9,11)
      float v92 = v91 + v90;	// L101, [11,16)
      v3[((v5 * 15) + 10)] = v92;	// L102, [16,17)
      float v93 = v0[((v5 * 15) + 11)][((v4 * 2) + 1)];	// L103, [0,2)
      float v94 = v93 * v38;	// L104, [2,6)
      float v95 = v30 + v94;	// L105, [6,11)
      float v96 = v3[((v5 * 15) + 11)];	// L106, [9,11)
      float v97 = v96 + v95;	// L107, [11,16)
      v3[((v5 * 15) + 11)] = v97;	// L108, [16,17)
      float v98 = v0[((v5 * 15) + 12)][((v4 * 2) + 1)];	// L109, [0,2)
      float v99 = v98 * v38;	// L110, [2,6)
      float v100 = v32 + v99;	// L111, [6,11)
      float v101 = v3[((v5 * 15) + 12)];	// L112, [9,11)
      float v102 = v101 + v100;	// L113, [11,16)
      v3[((v5 * 15) + 12)] = v102;	// L114, [16,17)
      float v103 = v0[((v5 * 15) + 13)][((v4 * 2) + 1)];	// L115, [0,2)
      float v104 = v103 * v38;	// L116, [2,6)
      float v105 = v34 + v104;	// L117, [6,11)
      float v106 = v3[((v5 * 15) + 13)];	// L118, [9,11)
      float v107 = v106 + v105;	// L119, [11,16)
      v3[((v5 * 15) + 13)] = v107;	// L120, [16,17)
      float v108 = v0[((v5 * 15) + 14)][((v4 * 2) + 1)];	// L121, [0,2)
      float v109 = v108 * v38;	// L122, [2,6)
      float v110 = v36 + v109;	// L123, [6,11)
      float v111 = v3[((v5 * 15) + 14)];	// L124, [9,11)
      float v112 = v111 + v110;	// L125, [11,16)
      v3[((v5 * 15) + 14)] = v112;	// L126, [16,17)
    }
  }
  for (int v113 = 0; v113 < 195; v113 += 1) {	// L129, [5348,13361), iterCycle=17, II=1
    for (int v114 = 0; v114 < 41; v114 += 1) {	// L130, [0,59), iterCycle=17, II=1
      #pragma HLS pipeline II=1
      float v115 = v0[(v113 * 2)][(v114 * 10)];	// L131, [0,2)
      float v116 = v3[(v113 * 2)];	// L132, [0,2)
      float v117 = v115 * v116;	// L133, [2,6)
      float v118 = v0[(v113 * 2)][((v114 * 10) + 1)];	// L134, [0,2)
      float v119 = v118 * v116;	// L135, [2,6)
      float v120 = v0[(v113 * 2)][((v114 * 10) + 2)];	// L136, [0,2)
      float v121 = v120 * v116;	// L137, [2,6)
      float v122 = v0[(v113 * 2)][((v114 * 10) + 3)];	// L138, [0,2)
      float v123 = v122 * v116;	// L139, [2,6)
      float v124 = v0[(v113 * 2)][((v114 * 10) + 4)];	// L140, [0,2)
      float v125 = v124 * v116;	// L141, [2,6)
      float v126 = v0[(v113 * 2)][((v114 * 10) + 5)];	// L142, [0,2)
      float v127 = v126 * v116;	// L143, [2,6)
      float v128 = v0[(v113 * 2)][((v114 * 10) + 6)];	// L144, [0,2)
      float v129 = v128 * v116;	// L145, [2,6)
      float v130 = v0[(v113 * 2)][((v114 * 10) + 7)];	// L146, [0,2)
      float v131 = v130 * v116;	// L147, [2,6)
      float v132 = v0[(v113 * 2)][((v114 * 10) + 8)];	// L148, [0,2)
      float v133 = v132 * v116;	// L149, [2,6)
      float v134 = v0[(v113 * 2)][((v114 * 10) + 9)];	// L150, [0,2)
      float v135 = v134 * v116;	// L151, [2,6)
      float v136 = v0[((v113 * 2) + 1)][(v114 * 10)];	// L152, [0,2)
      float v137 = v3[((v113 * 2) + 1)];	// L153, [0,2)
      float v138 = v136 * v137;	// L154, [2,6)
      float v139 = v117 + v138;	// L155, [6,11)
      float v140 = v2[(v114 * 10)];	// L156, [9,11)
      float v141 = v140 + v139;	// L157, [11,16)
      v2[(v114 * 10)] = v141;	// L158, [16,17)
      float v142 = v0[((v113 * 2) + 1)][((v114 * 10) + 1)];	// L159, [0,2)
      float v143 = v142 * v137;	// L160, [2,6)
      float v144 = v119 + v143;	// L161, [6,11)
      float v145 = v2[((v114 * 10) + 1)];	// L162, [9,11)
      float v146 = v145 + v144;	// L163, [11,16)
      v2[((v114 * 10) + 1)] = v146;	// L164, [16,17)
      float v147 = v0[((v113 * 2) + 1)][((v114 * 10) + 2)];	// L165, [0,2)
      float v148 = v147 * v137;	// L166, [2,6)
      float v149 = v121 + v148;	// L167, [6,11)
      float v150 = v2[((v114 * 10) + 2)];	// L168, [9,11)
      float v151 = v150 + v149;	// L169, [11,16)
      v2[((v114 * 10) + 2)] = v151;	// L170, [16,17)
      float v152 = v0[((v113 * 2) + 1)][((v114 * 10) + 3)];	// L171, [0,2)
      float v153 = v152 * v137;	// L172, [2,6)
      float v154 = v123 + v153;	// L173, [6,11)
      float v155 = v2[((v114 * 10) + 3)];	// L174, [9,11)
      float v156 = v155 + v154;	// L175, [11,16)
      v2[((v114 * 10) + 3)] = v156;	// L176, [16,17)
      float v157 = v0[((v113 * 2) + 1)][((v114 * 10) + 4)];	// L177, [0,2)
      float v158 = v157 * v137;	// L178, [2,6)
      float v159 = v125 + v158;	// L179, [6,11)
      float v160 = v2[((v114 * 10) + 4)];	// L180, [9,11)
      float v161 = v160 + v159;	// L181, [11,16)
      v2[((v114 * 10) + 4)] = v161;	// L182, [16,17)
      float v162 = v0[((v113 * 2) + 1)][((v114 * 10) + 5)];	// L183, [0,2)
      float v163 = v162 * v137;	// L184, [2,6)
      float v164 = v127 + v163;	// L185, [6,11)
      float v165 = v2[((v114 * 10) + 5)];	// L186, [9,11)
      float v166 = v165 + v164;	// L187, [11,16)
      v2[((v114 * 10) + 5)] = v166;	// L188, [16,17)
      float v167 = v0[((v113 * 2) + 1)][((v114 * 10) + 6)];	// L189, [0,2)
      float v168 = v167 * v137;	// L190, [2,6)
      float v169 = v129 + v168;	// L191, [6,11)
      float v170 = v2[((v114 * 10) + 6)];	// L192, [9,11)
      float v171 = v170 + v169;	// L193, [11,16)
      v2[((v114 * 10) + 6)] = v171;	// L194, [16,17)
      float v172 = v0[((v113 * 2) + 1)][((v114 * 10) + 7)];	// L195, [0,2)
      float v173 = v172 * v137;	// L196, [2,6)
      float v174 = v131 + v173;	// L197, [6,11)
      float v175 = v2[((v114 * 10) + 7)];	// L198, [9,11)
      float v176 = v175 + v174;	// L199, [11,16)
      v2[((v114 * 10) + 7)] = v176;	// L200, [16,17)
      float v177 = v0[((v113 * 2) + 1)][((v114 * 10) + 8)];	// L201, [0,2)
      float v178 = v177 * v137;	// L202, [2,6)
      float v179 = v133 + v178;	// L203, [6,11)
      float v180 = v2[((v114 * 10) + 8)];	// L204, [9,11)
      float v181 = v180 + v179;	// L205, [11,16)
      v2[((v114 * 10) + 8)] = v181;	// L206, [16,17)
      float v182 = v0[((v113 * 2) + 1)][((v114 * 10) + 9)];	// L207, [0,2)
      float v183 = v182 * v137;	// L208, [2,6)
      float v184 = v135 + v183;	// L209, [6,11)
      float v185 = v2[((v114 * 10) + 9)];	// L210, [9,11)
      float v186 = v185 + v184;	// L211, [11,16)
      v2[((v114 * 10) + 9)] = v186;	// L212, [16,17)
    }
  }
}

